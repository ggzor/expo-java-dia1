{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"dea1d8cff1277b680521","result":{"data":{"deck":{"id":"8752a40b-71a7-5f4a-ae09-de9cf46d9870","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = github;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Java Intermedio\"), mdx(\"img\", {\n    src: java\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Grupo de WhatsApp\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bit.ly/39ogV7R\"\n  }), \"https://bit.ly/39ogV7R\")), mdx(\"img\", {\n    src: qrgrupo\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Conocimientos previos \\uD83E\\uDDE0\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Programaci\\xF3n estructurada\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Condicionales\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ciclos\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Funciones\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Estructuras (\", mdx(\"span\", {\n    style: {\n      \"color\": \"#00a4db\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"struct\")), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arreglos\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sint\\xE1xis b\\xE1sica de Java\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reglas de alcance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Entrada y salida por consola\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Haber instalado JDK >= 8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manejo de un IDE/Editor\", mdx(\"br\", null), \"(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"vscode\"), \", Eclipse, NetBeans, etc)\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Sintaxis b√°sica ü•±\\\"\",\n    \"title\": \"\\\"Sintaxis\",\n    \"b√°sica\": true,\n    \"ü•±\\\"\": true\n  }), \"int x = 8;\\nint y = 9;\\nString cadenas[] = new String[] { \\n  \\\"|V| > 6\\\",  \\n  \\\"No es un vector lo suficientemente grande\\\" };\\n\\nif (Math.sqrt(x * x + y * y) > 6)\\n  System.out.println(cadenas[0]);\\nelse\\n  throw new IllegalArgumentException(cadenas[1]);\\n\\nfor (String s : cadenas) {\\n  System.out.println(s.toUpperCase());\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"10 title=\\\"Uso de excepciones b√°sico ‚ùóÔ∏è\\\"\",\n    \"title\": \"\\\"Uso\",\n    \"de\": true,\n    \"excepciones\": true,\n    \"b√°sico\": true,\n    \"‚ùóÔ∏è\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:15 title=\\\"Ciclos for-each ‚ôæÔ∏è\\\"\",\n    \"12:15\": true,\n    \"title\": \"\\\"Ciclos\",\n    \"for-each\": true,\n    \"‚ôæÔ∏è\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Declaraci√≥n de clases simple ‚öôÔ∏è\\\"\",\n    \"title\": \"\\\"Declaraci√≥n\",\n    \"de\": true,\n    \"clases\": true,\n    \"simple\": true,\n    \"‚öôÔ∏è\\\"\": true\n  }), \"public class Vector2D {\\n  private int x;\\n  private int y;\\n\\n  public Vector2D(int x, int y) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n\\n  public int getX() {\\n    return x;\\n  }\\n\\n  public int getY() {\\n    return y;\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Esto deber√≠a de ser un poco extra√±o üôÉ\\\"\",\n    \"title\": \"\\\"Esto\",\n    \"deber√≠a\": true,\n    \"de\": true,\n    \"ser\": true,\n    \"un\": true,\n    \"poco\": true,\n    \"extra√±o\": true,\n    \"üôÉ\\\"\": true\n  }), \"List<String> lista = new ArrayList<String>();\\nlista.add(\\\"Cadena 13\\\");\\nlista.add(\\\"Cadena 2\\\");\\nlista.add(\\\"Cadena 15\\\");\\n\\nfor (String s : lista) {\\n  System.out.println(s);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Esto s√≠ deber√≠a ser extra√±o ü§®\\\"\",\n    \"title\": \"\\\"Esto\",\n    \"s√≠\": true,\n    \"deber√≠a\": true,\n    \"ser\": true,\n    \"extra√±o\": true,\n    \"ü§®\\\"\": true\n  }), \"List<String> lista = new ArrayList<String>();\\nlista.add(\\\"Cadena 13\\\");\\nlista.add(\\\"Cadena 2\\\");\\nlista.add(\\\"Cadena 15\\\");\\n\\nint x = lista.stream()\\n             .map(s -> s.split(\\\" \\\")[1])\\n             .mapToInt(Integer::parseInt)\\n             .filter(i -> i > 10)\\n             .sum();\\n\\nSystem.out.println(x);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:20 title=\\\"¬øQu√© imprime este programa? ü§î\\\"\",\n    \"1:20\": true,\n    \"title\": \"\\\"¬øQu√©\",\n    \"imprime\": true,\n    \"este\": true,\n    \"programa?\": true,\n    \"ü§î\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Tema inicial\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"POO B\\xE1sico\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Abstracci\\xF3n\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Encapsulamiento\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polimorfismo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"POO en Java / Ejemplo Vector2D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"POO en Java / Ejemplo GUI\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Temas\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Streams: Principios y operadores b\\xE1sicos\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"El patr\\xF3n del \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"iterador\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"map\"), \" y \", mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"filter\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polimorfismo param\\xE9trico: Gen\\xE9ricos\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Funciones lambda\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interfaces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"reduce\"), \" b\\xE1sico\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Proyecto: Interfaz ASCII\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polimorfismo de subtipos: Herencia\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clases abstractas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sobreescritura de m\\xE9todos \", mdx(\"span\", {\n    style: {\n      \"color\": \"#00a4db\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"override\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"El patr\\xF3n del \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"decorador\"))))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Streams\\\"\",\n    \"title\": \"\\\"Streams\\\"\"\n  }), \"List<String> lista = new ArrayList<String>();\\nlista.add(\\\"Cadena 13\\\");\\nlista.add(\\\"Cadena 2\\\");\\nlista.add(\\\"Cadena 15\\\");\\n\\nint x = lista.stream()\\n             .map(s -> s.split(\\\" \\\")[1])\\n             .mapToInt(Integer::parseInt)\\n             .filter(i -> i > 10)\\n             .sum();\\n\\nSystem.out.println(x); // 28\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7[19:38],9[22:32] title=\\\"Funciones lambda (o an√≥nimas)\\\"\",\n    \"7[19:38],9[22:32]\": true,\n    \"title\": \"\\\"Funciones\",\n    \"lambda\": true,\n    \"(o\": true,\n    \"an√≥nimas)\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Una herramienta ubicua\"), mdx(\"h2\", null, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\"\n  }), \"Java Streams\")), mdx(\"img\", {\n    src: streamsjava\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Java Streams\\\"\",\n    \"title\": \"\\\"Java\",\n    \"Streams\\\"\": true\n  }), \"import java.util.List;\\nimport java.util.ArrayList;\\n\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    List<String> lista = new ArrayList<String>();\\n    lista.add(\\\"Cadena 13\\\");\\n    lista.add(\\\"Cadena 2\\\");\\n    lista.add(\\\"Cadena 15\\\");\\n\\n    int x = lista.stream()\\n                 .map(s -> s.split(\\\" \\\")[1])\\n                 .mapToInt(Integer::parseInt)\\n                 .filter(i -> i > 10)\\n                 .sum();\\n\\n    System.out.println(x);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\",\n    \"metastring\": \"title=\\\"C# IEnumerable\\\"\",\n    \"title\": \"\\\"C#\",\n    \"IEnumerable\\\"\": true\n  }), \"using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\n\\nclass MainClass {\\n  public static void Main (string[] args) {\\n    var lista = new List<String>();\\n    lista.Add(\\\"Cadena 13\\\");\\n    lista.Add(\\\"Cadena 2\\\");\\n    lista.Add(\\\"Cadena 15\\\");\\n\\n    var x = lista.Select(s => s.Split(\\\" \\\")[1])\\n                 .Select(int.Parse)\\n                 .Where(i => i > 10)\\n                 .Sum();\\n    \\n    Console.WriteLine(x);\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Java Streams\\\"\",\n    \"title\": \"\\\"Java\",\n    \"Streams\\\"\": true\n  }), \"import java.util.List;\\nimport java.util.ArrayList;\\n\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    List<String> lista = new ArrayList<String>();\\n    lista.add(\\\"Cadena 13\\\");\\n    lista.add(\\\"Cadena 2\\\");\\n    lista.add(\\\"Cadena 15\\\");\\n\\n    int x = lista.stream()\\n                 .map(s -> s.split(\\\" \\\")[1])\\n                 .mapToInt(Integer::parseInt)\\n                 .filter(i -> i > 10)\\n                 .sum();\\n\\n    System.out.println(x);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\",\n    \"metastring\": \"title=\\\"C# IEnumerable\\\" 1:20\",\n    \"title\": \"\\\"C#\",\n    \"IEnumerable\\\"\": true,\n    \"1:20\": true\n  }), \"using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\n\\nclass MainClass {\\n  public static void Main (string[] args) {\\n    var lista = new List<String>();\\n    lista.Add(\\\"Cadena 13\\\");\\n    lista.Add(\\\"Cadena 2\\\");\\n    lista.Add(\\\"Cadena 15\\\");\\n\\n    var x = (from s in lista\\n             let i = int.Parse(s.Split(\\\" \\\")[1])\\n             where i > 10\\n             select i).Sum();\\n\\n    Console.WriteLine(x);\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Java Streams\\\"\",\n    \"title\": \"\\\"Java\",\n    \"Streams\\\"\": true\n  }), \"import java.util.List;\\nimport java.util.ArrayList;\\n\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    List<String> lista = new ArrayList<String>();\\n    lista.add(\\\"Cadena 13\\\");\\n    lista.add(\\\"Cadena 2\\\");\\n    lista.add(\\\"Cadena 15\\\");\\n\\n    int x = lista.stream()\\n                 .map(s -> s.split(\\\" \\\")[1])\\n                 .mapToInt(Integer::parseInt)\\n                 .filter(i -> i > 10)\\n                 .sum();\\n\\n    System.out.println(x);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"title=\\\"Python itertools\\\"\",\n    \"title\": \"\\\"Python\",\n    \"itertools\\\"\": true\n  }), \"lista = []\\n\\nlista.append(\\\"Cadena 13\\\")\\nlista.append(\\\"Cadena 2\\\")\\nlista.append(\\\"Cadena 15\\\")\\n\\nx = sum(\\n      filter(lambda i: i > 10, \\n        map(int,\\n          map(lambda s: s.split(\\\" \\\")[1], \\n            lista\\n          )\\n        )\\n      )\\n    )\\n\\nprint(x)\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Java Streams\\\"\",\n    \"title\": \"\\\"Java\",\n    \"Streams\\\"\": true\n  }), \"import java.util.List;\\nimport java.util.ArrayList;\\n\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    List<String> lista = new ArrayList<String>();\\n    lista.add(\\\"Cadena 13\\\");\\n    lista.add(\\\"Cadena 2\\\");\\n    lista.add(\\\"Cadena 15\\\");\\n\\n    int x = lista.stream()\\n                 .map(s -> s.split(\\\" \\\")[1])\\n                 .mapToInt(Integer::parseInt)\\n                 .filter(i -> i > 10)\\n                 .sum();\\n\\n    System.out.println(x);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"title=\\\"Python itertools\\\" 1:20\",\n    \"title\": \"\\\"Python\",\n    \"itertools\\\"\": true,\n    \"1:20\": true\n  }), \"lista = []\\n\\nlista.append(\\\"Cadena 13\\\")\\nlista.append(\\\"Cadena 2\\\")\\nlista.append(\\\"Cadena 15\\\")\\n\\n\\nx = sum([i for i in [int(s.split(\\\" \\\")[1]) for s in lista] \\n           if i > 10])\\n\\nprint(x)\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Java Streams\\\"\",\n    \"title\": \"\\\"Java\",\n    \"Streams\\\"\": true\n  }), \"import java.util.List;\\nimport java.util.ArrayList;\\n\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    List<String> lista = new ArrayList<String>();\\n    lista.add(\\\"Cadena 13\\\");\\n    lista.add(\\\"Cadena 2\\\");\\n    lista.add(\\\"Cadena 15\\\");\\n\\n    int x = lista.stream()\\n                 .map(s -> s.split(\\\" \\\")[1])\\n                 .mapToInt(Integer::parseInt)\\n                 .filter(i -> i > 10)\\n                 .sum();\\n\\n    System.out.println(x);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Javascript (Lodash)\\\"\",\n    \"title\": \"\\\"Javascript\",\n    \"(Lodash)\\\"\": true\n  }), \"const _ = require('lodash')\\n\\nconst lista = []\\n\\nlista.push(\\\"Cadena 13\\\")\\nlista.push(\\\"Cadena 2\\\")\\nlista.push(\\\"Cadena 15\\\")\\n\\nconst x = _.sum(\\n              lista.map(s => s.split(\\\" \\\")[1])\\n                   .map(Number)\\n                   .filter(i => i > 10))\\n\\nconsole.log(x)\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Java Streams\\\"\",\n    \"title\": \"\\\"Java\",\n    \"Streams\\\"\": true\n  }), \"import java.util.List;\\nimport java.util.ArrayList;\\n\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    List<String> lista = new ArrayList<String>();\\n    lista.add(\\\"Cadena 13\\\");\\n    lista.add(\\\"Cadena 2\\\");\\n    lista.add(\\\"Cadena 15\\\");\\n\\n    int x = lista.stream()\\n                 .map(s -> s.split(\\\" \\\")[1])\\n                 .mapToInt(Integer::parseInt)\\n                 .filter(i -> i > 10)\\n                 .sum();\\n\\n    System.out.println(x);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\",\n    \"metastring\": \"title=\\\"Haskell\\\"\",\n    \"title\": \"\\\"Haskell\\\"\"\n  }), \"import Data.Function\\n\\nmain = print $ [\\\"Cadena 13\\\", \\\"Cadena 2\\\", \\\"Cadena 15\\\"]\\n             & map ((!! 1) . words)\\n             & map read\\n             & filter (> 10)\\n             & sum\\n\")))), mdx(\"hr\", null), mdx(\"img\", {\n    src: everywhere\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Temas\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Streams: Principios y operadores b\\xE1sicos\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"El patr\\xF3n del \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"iterador\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"map\"), \" y \", mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"filter\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polimorfismo param\\xE9trico: Gen\\xE9ricos\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Funciones lambda\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interfaces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"reduce\"), \" b\\xE1sico\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Proyecto: Interfaz ASCII\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polimorfismo de subtipos: Herencia\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clases abstractas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sobreescritura de m\\xE9todos \", mdx(\"span\", {\n    style: {\n      \"color\": \"#00a4db\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"override\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"El patr\\xF3n del \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"decorador\"))))), mdx(\"hr\", null), mdx(\"h1\", null, \"Interfaz ASCII \\uD83D\\uDE0E\"), mdx(\"img\", {\n    src: interfazascii\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Interfaz ASCII üòé\\\"\",\n    \"title\": \"\\\"Interfaz\",\n    \"ASCII\": true,\n    \"üòé\\\"\": true\n  }), \"package interfazascii.componentes;\\n\\nimport interfazascii.util.Vector2D;\\n\\n/** Representa un componente de la interfaz de usuario */\\npublic abstract class Componente {\\n  /**\\n   * Dibuja el componente en la pantalla indicada con la transformaci\\xF3n\\n   * especificada\\n   * \\n   * @param transformacion el desplazamiento al que debe estar este componente\\n   * @param pantalla la pantalla en la que se debe dibujar\\n   */\\n  public abstract void dibujar(Vector2D transformacion, Pantalla pantalla);\\n\\n  /**\\n   * @return el alto del componente\\n   */\\n  public abstract int getAlto();\\n\\n  /**\\n   * @return el ancho del componente\\n   */\\n  public abstract int getAncho();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Interfaz ASCII üòé\\\"\",\n    \"title\": \"\\\"Interfaz\",\n    \"ASCII\": true,\n    \"üòé\\\"\": true\n  }), \"package interfazascii.componentes;\\n\\nimport interfazascii.util.Vector2D;\\n\\npublic abstract class Componente {\\n  public abstract void dibujar(Vector2D transformacion, Pantalla pantalla);\\n  public abstract int getAlto();\\n  public abstract int getAncho();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Interfaz ASCII üòé\\\"\",\n    \"title\": \"\\\"Interfaz\",\n    \"ASCII\": true,\n    \"üòé\\\"\": true\n  }), \"package interfazascii.componentes;\\n\\nimport interfazascii.util.Vector2D;\\n\\n/** Clase que representa una etiqueta de Texto */\\npublic class Texto extends Componente {\\n  private String texto;\\n\\n  public Texto(String texto) {\\n    if (texto == null)\\n      throw new NullPointerException(\\\"El texto no puede ser nulo\\\");\\n\\n    this.texto = texto;\\n  }\\n\\n  @Override\\n  public void dibujar(Vector2D transformacion, Pantalla pantalla) {\\n    for (int i = 0; i < texto.length(); i++)\\n      pantalla.pintar(transformacion.desplazarHorizontalmente(i), texto.charAt(i));\\n  }\\n\\n  /**\\n   * @return el texto actual de la etiqueta\\n   */\\n  public String getTexto() {\\n    return texto;\\n  }\\n\\n  /**\\n   * Establece el valor de esta etiqueta de texto\\n   * @param texto el nuevo valor de la etiqueta\\n   */\\n  public void setTexto(String texto) {\\n    this.texto = texto;\\n  }\\n\\n  @Override\\n  public int getAlto() {\\n    return 1;\\n  }\\n\\n  @Override\\n  public int getAncho() {\\n    return texto.length();\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Interfaz ASCII üòé\\\"\",\n    \"title\": \"\\\"Interfaz\",\n    \"ASCII\": true,\n    \"üòé\\\"\": true\n  }), \"package interfazascii.componentes;\\n\\nimport interfazascii.util.Vector2D;\\n\\npublic class Texto extends Componente {\\n  private String texto;\\n\\n  public Texto(String texto) {\\n    if (texto == null)\\n      throw new NullPointerException(\\\"El texto no puede ser nulo\\\");\\n\\n    this.texto = texto;\\n  }\\n\\n  @Override\\n  public void dibujar(Vector2D transformacion, Pantalla pantalla) {\\n    for (int i = 0; i < texto.length(); i++)\\n      pantalla.pintar(transformacion.desplazarHorizontalmente(i), texto.charAt(i));\\n  }\\n\\n  public String getTexto() {\\n    return texto;\\n  }\\n\\n  public void setTexto(String texto) {\\n    this.texto = texto;\\n  }\\n\\n  @Override\\n  public int getAlto() {\\n    return 1;\\n  }\\n\\n  @Override\\n  public int getAncho() {\\n    return texto.length();\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Temas si contin\\xFAa el paro\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Streams: Operadores avanzados\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"limit\"), \" y \", mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"skip\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"reduce\"), \" avanzado (\", mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"collect\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Concurrencia gratis (\", mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"parallel\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jugando con el infinito (\", mdx(\"span\", {\n    style: {\n      \"color\": \"#d73a49\"\n    }\n  }, \"generate\"), \")\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Proyecto: Interfaz ASCII Interactiva\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interfaz de usuario con Java Swing \", mdx(\"br\", null), \" (o JavaFX, si prefieren)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"El patr\\xF3n del \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"observador\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Eventos y clases an\\xF3nimas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Funciones lambda\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Resumen\"), mdx(Graphviz, {\n    dot: \"digraph {\\n    \\\"POO B\\xE1sica\\\" -> \\\"Streams B\\xE1sico\\\";\\n    \\\"Streams B\\xE1sico\\\" -> \\\"Streams Avanzado\\\";\\n    \\\"POO B\\xE1sica\\\" -> \\\"Interfaz ASCII B\\xE1sica\\\";\\n    \\\"Interfaz ASCII B\\xE1sica\\\" -> \\\"Interfaz ASCII Interactiva\\\";\\n  }\",\n    mdxType: \"Graphviz\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Gracias\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Diapositivas: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://ggzor-expo-java-dia1.netlify.com\"\n  }), \"ggzor-expo-java-dia1.netlify.com\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C\\xF3digo fuente: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.github.com/ggzor/expo-java-dia1\"\n  }), \"github.com/ggzor/expo-java-dia1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Librer\\xEDas utilizadas: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/jxnblk/mdx-deck\"\n  }), \"mdx-deck\"), \" y \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/pomber/code-surfer\"\n  }), \"code-surfer\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"8752a40b-71a7-5f4a-ae09-de9cf46d9870","slug":"","title":"Java Intermedio"}}}